{"version":3,"file":"static/js/772.604eb33c.chunk.js","mappings":"iRAGMA,EAAW,QAEFC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBC,GAAzB,uFACyBC,EAAAA,EAAAA,IAAA,UAClBC,EAAAA,EADkB,kBACAF,EADA,4BAC4BG,EAAAA,EAD5B,qBACgDL,IAFzE,YACQM,EADR,QAIeC,WAJf,sBAKU,IAAIC,MAAMF,EAASC,YAL7B,gCAOSD,EAASG,MAPlB,kEAUA,MAZA,SAEyB,GAAVR,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,SCoDf,EAnDa,WACX,IAAQS,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAJiB,wCAUjB,WAA0BR,GAA1B,gFACES,QAAQC,IAAIV,GACZM,GAAa,GAFf,kBAI0Bf,EAAUS,GAJpC,UAIUW,EAJV,OAKIF,QAAQC,IAAIC,GACNR,EAAOQ,EAAQR,KACrBM,QAAQC,IAAIP,GACPA,EART,uBASY,IAAIL,MAAM,WATtB,QAWMM,EAAQD,GAXd,0DAcIK,EAAS,KAAMI,SAdnB,yBAgBIN,GAAa,GAhBjB,6EAViB,wBA+BjB,OAzBAO,EAAAA,EAAAA,YAAU,YANO,oCAOfC,CAAWd,EACZ,GAAE,CAACA,IAqBJS,QAAQC,IAAIP,IAGV,gCACGE,IAAa,SAACU,EAAA,EAAD,IACbR,IAAS,UAAC,IAAD,WAAOA,EAAP,4BACV,wBACGJ,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,2BACE,gBACEC,IAAG,0CAAqCD,GACxCE,IAAKJ,KAEP,uBAAIA,KACJ,uBAAIC,MANGF,EADD,QAajB,C,kFCrDYM,EAAkBC,EAAAA,GAAAA,IAAH,8LAUfC,EAAeD,EAAAA,GAAAA,IAAH,8nBAoCZE,EAAeF,EAAAA,GAAAA,IAAH,opB,SC7BzB,EAbe,WACb,OACE,UAACD,EAAD,YACE,SAACE,EAAD,KACA,SAACA,EAAD,KACA,SAACA,EAAD,KACA,SAACC,EAAD,KACA,SAACA,EAAD,KACA,SAACA,EAAD,MAGL,C,qECfYC,E,OAAOH,GAAAA,IAAH,mE,6ECFV,IAAM7B,EAAU,mCACVD,EAAW,8B","sources":["services/fetchCast.js","components/cast/Cast.jsx","components/loader/Loader.components.js","components/loader/Loader.jsx","components/text/Text.components.js","services/settings.js"],"sourcesContent":["import axios from 'axios';\nimport { API_KEY, API_PATH } from './settings';\n\nconst LANGUAGE = 'en-US';\n\nasync function fetchCast(movie_id) {\n  const response = await axios.get(\n    `${API_PATH}/movie/${movie_id}/credits?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport default fetchCast;\n","import Loader from 'components/loader/Loader';\nimport { Text } from 'components/text/Text.components';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchCast from 'services/fetchCast';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    uploadCast(movieId);\n  }, [movieId]);\n\n  async function uploadCast(movieId) {\n    console.log(movieId);\n    setIsLoading(true);\n    try {\n      const credits = await fetchCast(movieId);\n      console.log(credits);\n      const cast = credits.cast;\n      console.log(cast);\n      if (!cast) {\n        throw new Error('No data');\n      } else {\n        setCast(cast);\n      }\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n  console.log(cast);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <Text>{error} There are not movies</Text>}\n      <ul>\n        {cast.map(({ id, name, character, profile_path }) => (\n          <li key={id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w200/${profile_path}`}\n              alt={name}\n            />\n            <p>{name}</p>\n            <p>{character}</p>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  margin: 10px auto 20px;\n  width: 160px;\n  height: 60px;\n  position: relative;\n  /* left: 50%; */\n  /* top: 50%; */\n  /* transform: translate(-50%, -50%); */\n`;\n\nexport const LoaderCircle = styled.div`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  border-radius: 50%;\n  background-color: #3f51b5;\n  left: 15%;\n  transform-origin: 50%;\n  animation: circle 300ms alternate infinite ease;\n\n  @keyframes circle {\n    0% {\n      top: 60%;\n      height: 5px;\n      border-radius: 50px 50px 25px 25px;\n    }\n    40% {\n      height: 20px;\n      border-radius: 50%;\n      transform: scaleX(1);\n    }\n    100% {\n      top: 0%;\n    }\n  }\n  :nth-child(2) {\n    left: 45%;\n    animation-delay: 100ms;\n  }\n  :nth-child(3) {\n    left: auto;\n    right: 15%;\n    animation-delay: 200ms;\n  }\n`;\n\nexport const LoaderShadow = styled.div`\n  width: 20px;\n  height: 4px;\n  border-radius: 50%;\n  background-color: rgba(0, 0, 220, 0.5);\n  position: absolute;\n  top: 62px;\n  transform-origin: 50%;\n  z-index: -1;\n  left: 15%;\n  filter: blur(1px);\n  animation: shadow 300ms alternate infinite ease;\n  @keyframes shadow {\n    0% {\n      transform: scaleX(1.5);\n    }\n    40% {\n      transform: scaleX(1);\n      opacity: 0.7;\n    }\n    100% {\n      transform: scaleX(0.2);\n      opacity: 0.4;\n    }\n  }\n  :nth-child(4) {\n    left: 45%;\n    animation-delay: 100ms;\n  }\n  :nth-child(5) {\n    left: auto;\n    right: 15%;\n    animation-delay: 200ms;\n  }\n`;\n","import {\n  LoaderContainer,\n  LoaderCircle,\n  LoaderShadow,\n} from './Loader.components';\n\nconst Loader = () => {\n  return (\n    <LoaderContainer>\n      <LoaderCircle></LoaderCircle>\n      <LoaderCircle></LoaderCircle>\n      <LoaderCircle></LoaderCircle>\n      <LoaderShadow></LoaderShadow>\n      <LoaderShadow></LoaderShadow>\n      <LoaderShadow></LoaderShadow>\n    </LoaderContainer>\n  );\n};\n\nexport default Loader;\n","import styled from 'styled-components';\n\nexport const Text = styled.div`\n  margin-top: 10px;\n  text-align: center;\n`;\n","export const API_KEY = '3c96097624a2fa9e4b8164ba6b94edc9';\nexport const API_PATH = 'https://api.themoviedb.org/3';\n"],"names":["LANGUAGE","fetchCast","movie_id","axios","API_PATH","API_KEY","response","statusText","Error","data","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","error","setError","console","log","credits","message","useEffect","uploadCast","Loader","map","id","name","character","profile_path","src","alt","LoaderContainer","styled","LoaderCircle","LoaderShadow","Text"],"sourceRoot":""}