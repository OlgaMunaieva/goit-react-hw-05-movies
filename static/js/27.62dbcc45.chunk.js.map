{"version":3,"file":"static/js/27.62dbcc45.chunk.js","mappings":"kMAEaA,EAAkBC,EAAAA,GAAAA,IAAH,8LAUfC,EAAeD,EAAAA,GAAAA,IAAH,8nBAoCZE,EAAeF,EAAAA,GAAAA,IAAH,opB,SC7BzB,EAbe,WACb,OACE,UAACD,EAAD,YACE,SAACE,EAAD,KACA,SAACA,EAAD,KACA,SAACA,EAAD,KACA,SAACC,EAAD,KACA,SAACA,EAAD,KACA,SAACA,EAAD,MAGL,C,sECfYC,E,QAAOH,GAAAA,IAAH,mE,oLCCXI,EAAa,QACbC,EAAc,OAELC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,oGACyBC,EAAAA,EAAAA,IAAA,UAClBC,EAAAA,EADkB,qBACGJ,EADH,YACiBC,EADjB,oBACwCI,EAAAA,IAFjE,YACQC,EADR,QAIeC,WAJf,sBAKU,IAAIC,MAAMF,EAASC,YAL7B,gCAOSD,EAASG,MAPlB,kEAUA,MAZA,WAEeP,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,iBC+Cf,EA9Ca,WACX,OAAsCQ,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MALA,wCAWjB,2FACEJ,GAAa,GADf,kBAGyBZ,IAHzB,WAGUiB,EAHV,QAKgBC,cALhB,sBAMY,IAAIZ,MAAM,WANtB,OAQMI,EAAeO,EAAOE,SAR5B,0DAWIL,EAAS,KAAMM,SAXnB,yBAaIR,GAAa,GAbjB,8EAXiB,sBA4BjB,OArBAS,EAAAA,EAAAA,YAAU,YAPO,mCAQfC,EACD,GAAE,KAoBD,iCACE,2CACCX,IAAa,SAACY,EAAA,EAAD,IACbV,IAAS,UAAC,IAAD,WAAOA,EAAP,4BACV,wBACGJ,EAAYe,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACf,SAAC,IAAD,WACE,SAAC,EAAAC,QAAD,CAASC,MAAO,CAAEC,KAAMd,GAAqBe,GAAE,kBAAaJ,GAA5D,SACGD,GADsCC,IADtBA,EADN,QAUxB,C,oECjDYK,E,QAAiBrC,GAAAA,GAAH,2H,8ECFpB,IAAMS,EAAU,mCACVD,EAAW,8B","sources":["components/loader/Loader.components.js","components/loader/Loader.jsx","components/text/Text.components.js","services/fetchTrends.js","pages/home/Home.jsx","pages/home/Home.styled.js","services/settings.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  margin: 10px auto 20px;\n  width: 160px;\n  height: 60px;\n  position: relative;\n  /* left: 50%; */\n  /* top: 50%; */\n  /* transform: translate(-50%, -50%); */\n`;\n\nexport const LoaderCircle = styled.div`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  border-radius: 50%;\n  background-color: #3f51b5;\n  left: 15%;\n  transform-origin: 50%;\n  animation: circle 300ms alternate infinite ease;\n\n  @keyframes circle {\n    0% {\n      top: 60%;\n      height: 5px;\n      border-radius: 50px 50px 25px 25px;\n    }\n    40% {\n      height: 20px;\n      border-radius: 50%;\n      transform: scaleX(1);\n    }\n    100% {\n      top: 0%;\n    }\n  }\n  :nth-child(2) {\n    left: 45%;\n    animation-delay: 100ms;\n  }\n  :nth-child(3) {\n    left: auto;\n    right: 15%;\n    animation-delay: 200ms;\n  }\n`;\n\nexport const LoaderShadow = styled.div`\n  width: 20px;\n  height: 4px;\n  border-radius: 50%;\n  background-color: rgba(0, 0, 220, 0.5);\n  position: absolute;\n  top: 62px;\n  transform-origin: 50%;\n  z-index: -1;\n  left: 15%;\n  filter: blur(1px);\n  animation: shadow 300ms alternate infinite ease;\n  @keyframes shadow {\n    0% {\n      transform: scaleX(1.5);\n    }\n    40% {\n      transform: scaleX(1);\n      opacity: 0.7;\n    }\n    100% {\n      transform: scaleX(0.2);\n      opacity: 0.4;\n    }\n  }\n  :nth-child(4) {\n    left: 45%;\n    animation-delay: 100ms;\n  }\n  :nth-child(5) {\n    left: auto;\n    right: 15%;\n    animation-delay: 200ms;\n  }\n`;\n","import {\n  LoaderContainer,\n  LoaderCircle,\n  LoaderShadow,\n} from './Loader.components';\n\nconst Loader = () => {\n  return (\n    <LoaderContainer>\n      <LoaderCircle></LoaderCircle>\n      <LoaderCircle></LoaderCircle>\n      <LoaderCircle></LoaderCircle>\n      <LoaderShadow></LoaderShadow>\n      <LoaderShadow></LoaderShadow>\n      <LoaderShadow></LoaderShadow>\n    </LoaderContainer>\n  );\n};\n\nexport default Loader;\n","import styled from 'styled-components';\n\nexport const Text = styled.div`\n  margin-top: 10px;\n  text-align: center;\n`;\n","import axios from 'axios';\nimport { API_KEY, API_PATH } from './settings';\n\nconst MEDIA_TYPE = 'movie';\nconst TIME_WINDOW = 'week';\n\nasync function fetchTrendMovies() {\n  const response = await axios.get(\n    `${API_PATH}/trending/${MEDIA_TYPE}/${TIME_WINDOW}?api_key=${API_KEY}`\n  );\n  if (response.statusText) {\n    throw new Error(response.statusText);\n  }\n  return response.data;\n}\n\nexport default fetchTrendMovies;\n","import Loader from 'components/loader/Loader';\nimport { Text } from 'components/text/Text.components';\nimport { useEffect, useState } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport fetchTrendMovies from 'services/fetchTrends';\nimport { TrendMovieItem } from './Home.styled';\n\nconst Home = () => {\n  const [trendMovies, setTrendMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const location = useLocation();\n\n  useEffect(() => {\n    uploadTrends();\n  }, []);\n\n  async function uploadTrends() {\n    setIsLoading(true);\n    try {\n      const trends = await fetchTrendMovies();\n\n      if (!trends.total_results) {\n        throw new Error('No data');\n      } else {\n        setTrendMovies(trends.results);\n      }\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <h1>Trending today</h1>\n      {isLoading && <Loader />}\n      {error && <Text>{error} There are not movies</Text>}\n      <ul>\n        {trendMovies.map(({ title, id }) => (\n          <TrendMovieItem key={id}>\n            <NavLink state={{ from: location }} key={id} to={`/movies/${id}`}>\n              {title}\n            </NavLink>\n          </TrendMovieItem>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default Home;\n","import styled from 'styled-components';\n\nexport const TrendMovieItem = styled.li`\n  line-height: 1.5;\n  /* list-style-type: none; */\n  & a {\n    text-decoration-line: none;\n  }\n`;\n","export const API_KEY = '3c96097624a2fa9e4b8164ba6b94edc9';\nexport const API_PATH = 'https://api.themoviedb.org/3';\n"],"names":["LoaderContainer","styled","LoaderCircle","LoaderShadow","Text","MEDIA_TYPE","TIME_WINDOW","fetchTrendMovies","axios","API_PATH","API_KEY","response","statusText","Error","data","useState","trendMovies","setTrendMovies","isLoading","setIsLoading","error","setError","location","useLocation","trends","total_results","results","message","useEffect","uploadTrends","Loader","map","title","id","NavLink","state","from","to","TrendMovieItem"],"sourceRoot":""}